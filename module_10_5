import os
from multiprocessing import Pool
from datetime import datetime


def read_info(name):
    """Считывает содержимое файла построчно в локальный список."""
    all_data = []  # Локальный список
    with open(name, 'r') as file:
        while True:
            line = file.readline()  # Считываем строку
            if not line:  # Проверка на пустую строку
                break
            all_data.append(line)  # Добавляем строку в список


def measure_time_linear(filenames):
    """Линейный вызов функции read_info."""
    start_time = datetime.now()
    for filename in filenames:
        read_info(filename)
    end_time = datetime.now()
    print(f"Линейный вызов занял: {end_time - start_time}")


def measure_time_parallel(filenames):
    """Многопроцессный вызов функции read_info."""
    start_time = datetime.now()
    with Pool() as pool:
        pool.map(read_info, filenames)
    end_time = datetime.now()
    print(f"Многопроцессный вызов занял: {end_time - start_time}")


if __name__ == '__main__':
    # Создаем список файлов
    filenames = [f'file {number}.txt' for number in range(1, 5)]

    # Проверяем существование всех файлов
    missing_files = [filename for filename in filenames if not os.path.exists(filename)]
    if missing_files:
        print(f"Отсутствуют файлы: {missing_files}")
    else:
        print("Все файлы найдены.")

        # Линейный вызов
        start_time = datetime.now()
        for filename in filenames:
            read_info(filename)
        print("Линейный вызов занял:", datetime.now() - start_time)

        # Многопроцессный вызов
        start_time = datetime.now()
        with Pool(processes=len(filenames)) as pool:
            pool.map(read_info, filenames)
        print("Многопроцессный вызов занял:", datetime.now() - start_time)
