import threading
import random
from queue import Queue
from time import sleep


class Table:
    """Класс для стола в кафе."""

    def __init__(self, number):
        self.number = number  # Номер стола
        self.guest = None  # Гость за столом (по умолчанию None)


class Guest(threading.Thread):
    """Класс для гостя (поток)."""

    def __init__(self, name):
        super().__init__()
        self.name = name  # Имя гостя

    def run(self):
        """Имитация пребывания гостя за столом."""
        dining_time = random.randint(3, 10)
        sleep(dining_time)


class Cafe:
    """Класс для кафе."""

    def __init__(self, *tables):
        self.tables = list(tables)  # Список столов
        self.queue = Queue()  # Очередь гостей

    def guest_arrival(self, *guests):
        """Прибытие гостей в кафе."""
        for guest in guests:
            # Поиск свободного стола
            free_table = next((table for table in self.tables if table.guest is None), None)
            if free_table:
                free_table.guest = guest
                guest.start()  # Запуск потока гостя
                print(f"{guest.name} сел(-а) за стол номер {free_table.number}")
            else:
                # Если нет свободных столов, добавляем гостя в очередь
                self.queue.put(guest)
                print(f"{guest.name} в очереди")

    def discuss_guests(self):
        """Обслуживание гостей."""
        while not self.queue.empty() or any(table.guest is not None for table in self.tables):
            for table in self.tables:
                if table.guest and not table.guest.is_alive():  # Если гость завершил поток
                    print(f"{table.guest.name} покушал(-а) и ушёл(ушла)")
                    print(f"Стол номер {table.number} свободен")
                    table.guest = None  # Освобождаем стол

                if table.guest is None and not self.queue.empty():  # Если стол свободен и есть очередь
                    next_guest = self.queue.get()
                    table.guest = next_guest
                    next_guest.start()  # Запуск нового потока
                    print(f"{next_guest.name} вышел(-ла) из очереди и сел(-а) за стол номер {table.number}")

            sleep(1)  # Пауза перед следующей проверкой


# Создание столов
tables = [Table(number) for number in range(1, 6)]

# Имена гостей
guest_names = [
    'Maria', 'Oleg', 'Vakhtang', 'Sergey', 'Darya', 'Arman',
    'Vitoria', 'Nikita', 'Galina', 'Pavel', 'Ilya', 'Alexandra'
]

# Создание гостей
guests = [Guest(name) for name in guest_names]

# Заполнение кафе столами
cafe = Cafe(*tables)

# Приём гостей
cafe.guest_arrival(*guests)

# Обслуживание гостей
cafe.discuss_guests()
